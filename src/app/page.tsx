import Divider from "@/components/divider";
import Image from "next/image";
import Link from "next/link";

export default function Home() {
  return (
    <div className="font-[family-name:var(--font-geist-sans)]">
      <div className="py-8 flex flex-col items-center justify-center">
        <h1>Server Components</h1>
        <p>Entendendo a feature do React</p>
      </div>
      <Divider />
      <div className="container mx-auto px-4 py-8 flex flex-col lg:flex-row gap-8">
        {/* Index sidebar */}
        <nav className="hidden lg:block w-1/4 sticky top-16 self-start">
          <ul className="space-y-2">
            <li>
              <a href="#secao1" className="hover:text-blue-500">
                Se√ß√£o 1
              </a>
            </li>
            <li>
              <a href="#secao1" className="hover:text-blue-500">
                Se√ß√£o 2
              </a>
            </li>
            <li>
              <a href="#secao1" className="hover:text-blue-500">
                Se√ß√£o 3
              </a>
            </li>
            <li>
              <a href="#secao1" className="hover:text-blue-500">
                Se√ß√£o 4
              </a>
            </li>
          </ul>
        </nav>
        {/* Main text area */}
        <main className="w-full lg:w-3/4">
          <h2>Uma breve hist√≥ria üìú</h2>
          <p>
            Antes de mergulhar do conceito de Server Components, √© importante
            saber um pouco de como eles surgiram. Bem pouco, eu prometo.
          </p>
          <p>
            E para saber isso, √© preciso se familiarizar com o conceito de
            Server Side Rendering (SSR) e Client Side Rendering (CSR). Essas s√£o
            duas t√©cnicas de renderiza√ß√£o do websites. Ao renderizar uma
            aplica√ß√£o web, o c√≥digo JavaScript, com que foi escrito, √©
            convertido para HTML e CSS, que o navegador usa para exibir a
            interface de usu√°rio.
          </p>
          <p>
            Essa convers√£o pode ocorrer do lado do servidor ou do lado do
            cliente, o que caracteriza as duas t√©cnicas de renderiza√ß√£o.
          </p>
          <p>Voc√™ se lembra quem √© o servidor e quem √© o cliente?</p>
          <div className="flex flex-row justify-center gap-6">
            <div className="flex flex-col justify-center items-center">
              <Image
                alt="Server picture"
                src="/images/server.png"
                width={128}
                height={128}
              />
              <h3>Servidor</h3>
              <p>
                O computador em um data center que guarda o c√≥digo da aplica√ß√£o
                do site.
              </p>
            </div>
            <div className="flex flex-col justify-center items-center">
              <Image
                alt="Browser picture"
                src="/images/browser.png"
                width={128}
                height={128}
              />
              <h3>Cliente</h3>
              <p>
                O navegador que est√° acessando um site e exibindo-o para o
                usu√°rio.
              </p>
            </div>
          </div>
          <p>
            No SSR, a convers√£o √© feita no servidor, que envia para o cliente o
            HTML e o CSS, ou seja, a p√°gina pronta para ser exibida. No CSR, o
            servidor envia o c√≥digo JavaScript para o cliente, que ent√£o o
            converte em HTML e CSS e exibe a interface da p√°gina para o usu√°rio.
          </p>
          {/* BOTAR IMAGEM EXEMPLIFICANDO */}
          <p>
            Por muito tempo, o React s√≥ fazia Client Side Rendering. Quando o
            Next.js surgiu, em 2016, ele trouxe o Server Side Rendering. Essa
            feature foi muito importante porque impulsiona os sites para os
            motores de busca (SEO). Ou seja, usando SSR, sua aplica√ß√£o tem maior
            chance de aparecer nas buscas do Google e relativos.
          </p>
          <p>
            Mas, nem tudo s√£o flores. O SSR s√≥ era usado em p√°ginas, enquanto os
            componentes (que compoem as p√°ginas) em si, eram renderizados com
            CSR. Isso porque a intera√ß√£o do usu√°rio com componentes, como
            cliques em bot√µes e submits de formul√°rios, necessita do c√≥digo
            JavaScript para funcionar. Ent√£o somente o CSR serve para esses
            casos. Eis que, no final de 2020, o React anunciou os Server
            Components, que prometiam otimizar a renderiza√ß√£o em v√°rios
            aspectos.
          </p>
          <h2>Server Components</h2>
          <p>
            Os Server Components s√£o componentes que s√£o renderizados com SSR.
            Com eles, conseguimos enviar menos c√≥digo JavaScript para o cliente
            e assim obter mais performance na aplica√ß√£o. E ainda conseguimos
            aliar essa performance com a interatividade do CSR.
          </p>
          <p>
            Fazemos isso separando os componentes interag√≠veis do nosso Server
            Component em Client Components. Os Client Components ser√£o
            pr√©-renderizados no servidor, ent√£o uma preview n√£o-interative
            desses componentes √© exibida para o usu√°rio. Ap√≥s isso, eles passam
            por um processo chamado de hidrata√ß√£o, que √© quando o HTML est√°tico
            recebe o JavaScript necess√°rio para a intera√ß√£o funcionar.
          </p>
          <h3>No Next.js</h3>
          <p>
            A partir do Next.js 13, usando o App Router, os Server Components
            s√£o o componente padr√£o. Ou seja, todo componente criado vai ser
            renderizado do lado do servidor. Para usar features de intera√ß√£o, √©
            necess√°rio colocar uma diretiva &quot;use client&quot; no in√≠cio do
            arquivo do componente.
          </p>
          <p>
            Colocando essa diretiva, voc√™ define o limite entre o que deve ser
            renderizado de cada lado. Isso porque qualquer componente utilizado
            num Client Component √© tido como parte dele e tamb√©m √© renderizado
            com CSR. Se for necess√°rio usar Server Components dentro de Client
            Components, isso s√≥ pode ser feito usando a propriedade children do
            componente.
          </p>
          <p>
            Ah, e se voc√™ tentar usar alguma interatividade num Server
            Component, o Next.js vai te mostrar um erro tipo esse aqui:
          </p>
          <div className="p-4 text-red-700 border-red-700 rounded-lg border-2">
            You&apos;re importing a component that needs `useEffect`. This React
            hook only works in a client component. To fix, mark the file (or its
            parent) with the `&quot;use client&quot;` directive.
          </div>
          {/* BOTAR IMAGEM */}
          <p>
            Bem auto-explicativo, n√©? S√≥ colocar &quot;use client&quot; no topo
            do arquivo, e voi l√°.
          </p>
          <p>
            √â importante pensar em sempre ter o m√≠nimo de JavaScript sendo
            enviado para o cliente, portanto, dividir bem o que precisa ser
            Client Component e o que n√£o precisa, quando for criar sua √°rvore de
            componentes.
          </p>
          {/* MUITO MAIS CONTE√öDO, PEGAR REFERENCIAS DA PARTE RENDERING DO SITE DO NEXT */}
          <h2>Na pr√°tica</h2>
          <p>
            Veja agora um exemplo de uso de Server Components. Abaixo, h√° bot√µes
            para p√°ginas iguais. Todas mostram uma imagem aleat√≥ria buscada de
            uma API. No entanto, uma foi feita com Server Component, outra foi
            feita 100% com Client Components e a √∫ltima foi feita utilizando
            ambos.
          </p>

          <div className="flex flex-row gap-8">
            <Link href={"/random-image-generator/server"}>
              <div className="p-4 bg-blue-500 font-bold">Server Component</div>
            </Link>

            <Link href={"/random-image-generator/client"}>
              <div className="p-4 bg-blue-500 font-bold">Client Component</div>
            </Link>

            <Link href={"/random-image-generator/mixed"}>
              <div className="p-4 bg-blue-500 font-bold">Ambos</div>
            </Link>
          </div>

          {/* TODO - Transformar num componente */}
          <p>
            Aten√ß√£o! No Server Component podemos fazer tudo que um backend faria
            direto no corpo do componente, como chamadas a APIs e queries para
            bancos de dados. Mas isso deve ser feito com cuidado, pois pode
            prejudicar a escalabilidade e n√£o segue o princ√≠pio da Separa√ß√£o de
            Responsabilidades, importante no desenvolvimento de software.
          </p>
        </main>
      </div>
    </div>
  );
}

// Colocar tecnologias clic√°veis ou destacadas.
// Colocar meu nome
// DAR CR√âDITO AO FREEPIK <a href="https://www.flaticon.com/br/icones-gratis/servidor" title="servidor √≠cones">Servidor √≠cones criados por Freepik - Flaticon</a>
